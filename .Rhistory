##' Adjusted Kruskal-Wallis
#'
#'
#' Tab 6: Association Tests - Pairwise Comparisons
##' Pairwise t-test
#'
##' Pairwise Dunn's Test
#'
#'
#' Tab 7: Association Tests - Univariate Cox Models
##' Individual univariate Cox models
#'
##' Adjusted univariate Cox models
#'
#'
#' Tab 7: Association Tests - Multivariable Cox Models
#'
#'
#' Tab 7: Association Tests - Multivariable Cox Model Assumptions
#'
#'
#' Tab 8: Adjusted Survival Curves - New Data
#'
#'
#' Tab 8: Adjusted Survival Curves - All Adjusted Survival Curves
#'
#'
#' Tab 8: Adjusted Survival Curves - Single Adjusted Survival Curves
#'
#'
#' Tab 9: Recursive Partitioning Survival Trees - Rpart
##' Rpart Tree Formula
#'
##' Rpart Tree Plot
#'
##' Rpart Tree Survival Curves
#'
#'
#' Tab 9: Recursive Partitioning Survival Trees - Ctree
##' Ctree Formula
#'
##' Ctree Plot
#'
##' Ctree Survival Curves
#'
#'
#' Tab 10: Maftools - Summary
##' MAF Summary
dataInputMAFPLOT <- read.maf(maf = dataInputMAF)
dataInputMAFPLOT
#'
##' Sample Summary
getSampleSummary(dataInputMAFPLOT)
#'
##' Gene Summary
getGeneSummary(dataInputMAFPLOT)
#'
##' Get Fields
getFields(dataInputMAFPLOT)
#'
##' Associated Clinical Data
getClinicalData(dataInputMAFPLOT)
#' ---
#' title: 'GEOXAR Session Code'
#' ---
#'
#'
#' Load up relevant libraries
library(DT)
library(magrittr)
library(dplyr)
library(fabricatr)
library(reshape2)
library(stringr)
library(operator.tools)
library(ggplot2)
library(RColorBrewer)
library(rpart)
library(rpart.plot)
library(partykit)
library(survival)
library(survminer)
library(stats)
library(rstatix)
library(DescTools)
library(car)
library(R.utils)
library(maftools)
#'
#'
#' Complete Function
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
#'
#'
#' Tab 1: Load up clinical patient data and preview
##' Note: Please replace temporary file path with path to uploaded file
#'
##' Get total number of columns in data
#'
##' Get total number of rows in data
#'
#'
#' Tab 1: Load up clinical sample data and preview
##' Note: Please replace temporary file path with path to uploaded file
#'
##' Get total number of columns in data
#'
##' Get total number of rows in data
#'
#'
#' Tab 1: Merge patient/sample data and preview
#'
#'
#' Tab 1: Load up CNA data and preview
##' Note: Please replace temporary file path with path to uploaded file
#'
##' Get total number of columns in data
#'
##' Get total number of rows in data
#'
#'
#' Tab 1: Load up MAF data and preview
##' Note: Please replace temporary file path with path to uploaded file
dataInputMAF <- read.csv("/tmp/RtmpOjr91s/d04b2df2074c7eb685d32cfe/0.txt", header = TRUE, sep = "\t", quote = "\"", na.strings = c("", " ", "NA"), skip = 1L, row.names = NULL)
MAF_Validated <- dataInputMAF
datatable(MAF_Validated, options = list(lengthMenu = c(10, 30, 50, 100), pageLength = 30, scrollX = TRUE, scrollY = "390px"))
#'
##' Get total number of columns in data
Tot_MAF_Col <- ncol(dataInputMAF)
Tot_MAF_Col
#'
##' Get total number of rows in data
Tot_MAF_Row <- nrow(dataInputMAF)
Tot_MAF_Row
#'
#'
#' Tab 2: Clinical variables datatable
#'
#'
#' Tab 2: CNA datatable
#'
#'
#' Tab 2: MAF datatable
#'
#'
#' Tab 3: Convert variables
##' Check clinical variable types
#'
##' Check clinical variable levels
#'
#'
#' Tab 3: Subset data
##' Filter and preview clinical data
#'
##' Check selected variable levels
#'
#'
#' Tab 3: Survival recoding
#'
#'
#' Tab 3: CNA selection and calculation
#'
#'
#' Tab 3: CNA calculation save file preview
#'
#'
#' Tab 4: Exploratory Plots - Boxplot
#'
#'
#' Tab 4: Exploratory Plots - Scatterplot
#'
#'
#' Tab 4: Exploratory Plots - Barplots
#'
#'
#' Tab 4: Exploratory Plots - Histogram
#'
#'
#' Tab 4: Exploratory Plots - Facetwrap Histogram
#'
#'
#' Tab 4: Exploratory Plots - Density Plot
#'
#'
#' Tab 4: Exploratory Plots - Segmented Density Plot
#'
#'
#' Tab 4: Exploratory Plots - FacetWrap Density Plot
#'
#'
#' Tab 4: Exploratory Plots - Histogram and Density Plot
#'
#'
#' Tab 4: Exploratory Plots - FacetWrap Histogram and Density Plot
#'
#'
#' Tab 5: Survival Plots - Clinical Variable KM Plots
##' KM Survival Plots
#'
##' Logrank Tests
#'
#'
#' Tab 5: Survival Plots - CNA Quartile KM Plots
##' KM Survival Plots
#'
##' Logrank Tests
#'
#'
#' Tab 5: Survival Plots - KM Plots for Treatment (Yes)
##' KM Survival Plots
#'
##' Logrank Tests
#'
#'
#' Tab 5: Survival Plots - KM Plots for Treatment (No)
##' KM Survival Plots
#'
##' Logrank Tests
#'
#'
#' Tab 6: Association Tests - Chi-Squared
##' Individual Chi-squared tests
#'
##' Adjusted Chi-squared tests
#'
#'
#' Tab 6: Association Tests - FET
##' Individual FET
#'
##' Adjusted FET
#'
#'
#' Tab 6: Association Tests - Simulated FET
##' Individual Simulated FET
#'
##' Adjusted Simulated FET
#'
#'
#' Tab 6: Association Tests - ANOVA Assumptions
##' Levene's Test
#'
##' Fligner test
#'
##' Shapiro Test
#'
#'
#' Tab 6: Association Tests - ANOVA
##' Individual ANOVA
#'
##' Adjusted ANOVA
#'
#'
#' Tab 6: Association Tests - Kruskal-Wallis
##' Individual Kruskal-Wallis
#'
##' Adjusted Kruskal-Wallis
#'
#'
#' Tab 6: Association Tests - Pairwise Comparisons
##' Pairwise t-test
#'
##' Pairwise Dunn's Test
#'
#'
#' Tab 7: Association Tests - Univariate Cox Models
##' Individual univariate Cox models
#'
##' Adjusted univariate Cox models
#'
#'
#' Tab 7: Association Tests - Multivariable Cox Models
#'
#'
#' Tab 7: Association Tests - Multivariable Cox Model Assumptions
#'
#'
#' Tab 8: Adjusted Survival Curves - New Data
#'
#'
#' Tab 8: Adjusted Survival Curves - All Adjusted Survival Curves
#'
#'
#' Tab 8: Adjusted Survival Curves - Single Adjusted Survival Curves
#'
#'
#' Tab 9: Recursive Partitioning Survival Trees - Rpart
##' Rpart Tree Formula
#'
##' Rpart Tree Plot
#'
##' Rpart Tree Survival Curves
#'
#'
#' Tab 9: Recursive Partitioning Survival Trees - Ctree
##' Ctree Formula
#'
##' Ctree Plot
#'
##' Ctree Survival Curves
#'
#'
#' Tab 10: Maftools - Summary
##' MAF Summary
dataInputMAFPLOT <- read.maf(maf = dataInputMAF)
dataInputMAFPLOT
#'
##' Sample Summary
getSampleSummary(dataInputMAFPLOT)
#'
##' Gene Summary
getGeneSummary(dataInputMAFPLOT)
#'
##' Get Fields
getFields(dataInputMAFPLOT)
#'
##' Associated Clinical Data
getClinicalData(dataInputMAFPLOT)
#'
#'
#' Tab 10: Maftools - Plots
##' MAF Summary Plot
sumMAF <- plotmafSummary(dataInputMAFPLOT, rmOutlier = FALSE, addStat = "mean", dashboard = TRUE, titvRaw = FALSE, top = 10L)
sumMAF
#'
##' Oncoplot
Onco <- oncoplot(dataInputMAFPLOT, top = 20L)
Onco
#'
##' Oncostrip
OncoStrip <- oncostrip(dataInputMAFPLOT, genes = c("TP53", "MLLT4"))
OncoStrip
#'
##' Transitions and Transversions
TandTPlot <- {
laml.Tab10_Summary_Plot_Fraction <- titv(maf = dataInputMAFPLOT, plot = FALSE, useSyn = FALSE)
plotTiTv(res = laml.Tab10_Summary_Plot_Fraction)
}
TandTPlot
#'
##' Lollipop plot 1
Lol1 <- lollipopPlot(dataInputMAFPLOT, gene = "TP53", AACol = "HGVSp_Short", labPosSize = 0.9, showMutationRate = TRUE, showDomainLabel = TRUE, repel = FALSE, showLegend = TRUE, legendTxtSize = 0.8, labPosAngle = 0L, domainLabelSize = 0.8)
Lol1
#'
##' Lollipop plot 2
Lol2 <- lollipopPlot(dataInputMAFPLOT, gene = "MLLT4", AACol = "HGVSp_Short", labPosSize = 0.9, showMutationRate = TRUE, showDomainLabel = TRUE, repel = FALSE, showLegend = TRUE, legendTxtSize = 0.8, labPosAngle = 0L, domainLabelSize = 0.8)
Lol2
#'
##' Lollipop plot 3
Lol3 <- lollipopPlot(dataInputMAFPLOT, gene = "NF2", AACol = "HGVSp_Short", labPosSize = 0.9, showMutationRate = TRUE, showDomainLabel = TRUE, repel = FALSE, showLegend = TRUE, legendTxtSize = 0.8, labPosAngle = 0L, domainLabelSize = 0.8)
Lol3
#'
##' Mutation load plot
Mut <- (laml.mutload <- tcgaCompare(maf = dataInputMAFPLOT, cohortName = "Our Data"))
Mut
#'
##' Somatic interactions
VAF <- somaticInteractions(maf = dataInputMAFPLOT, top = 25L, pvalue = c(0.01, 0.05))
VAF
library(tidyverse)
student_df <- read.csv("studentsurvey.csv")
library(tidyverse)
student_df <- read.csv("studentsurvey.csv")
View(student_df)
names(student_df)
View(student_df)
head(student_df)
glimpse(student_df)
student_df_new <- student_df %>% select(Smoker, hoursExercising)
student_df %>% select(Smoker, hoursExercising)
View(student_df_new)
student_df %>% select(hoursExercising) %>% summary()
student_df_new %>% select(hoursExercising) %>% summary()
student_df_new %>% select(hoursExercising) %>%
summarise(n = n(),
Mean_df = mean(hoursExercising),
SD_df = sd(hoursExercising))
student_df_new %>% ggplot(aes(x = "All Students", y=hoursExercising)) + geom_boxplot() + stat_summary(fun.y=mean, geom="point", shape=18, size=3, color="red", fill="red")
student_df %>% select(hoursExercising) %>% summary()
student_df_new %>% select(hoursExercising) %>% summary()
student_df_new %>% ggplot(aes(x = "All Students", y=hoursExercising)) + geom_boxplot() + stat_summary(fun.y=mean, geom="point", shape=18, size=3, color="red", fill="red") + coord_flip()
?t.test
t.test(student_df$hoursExercising, mu = 5)
t.test(student_df$hoursExercising, mu = 5, alternative = "greater")
t.test(student_df$hoursExercising, mu = 5, alternative = "less")
t.test(student_df$hoursExercising)
?t.test
# Ho: mu = 5 vs Ha: mu != 5
t.test(student_df$hoursExercising, mu = 5)
# A p-value is the probability of observing such data given the null hypothesis was actually true.
t.test(student_df$hoursExercising)
t.test(student_df$hoursExercising, mu = 5)
t.test(student_df$hoursExercising)
student_df_new %>% group_by(Smoker) %>% summarise(mean_exer = mean(hoursExercising), SD = sd(hoursExercising))
t.test(hoursExercising ~ Smoker, data = student_df)
student_df_new %>% ggplot(aes(x = "All Students", y=hoursExercising)) + geom_boxplot() + stat_summary(fun.y=mean, geom="point", shape=18, size=3, color="red", fill="red") + coord_flip()
library(tolerance)
library(tidyverse)
# Read in the data
osteo.df <- read.csv("/home/lydia/Downloads/Osteo_exercise_wide.csv")
head(osteo.df)
osteo.df %>% select(Regime) %>% table()
osteo.df <- osteo.df %>%
mutate(Improvement = Post_Balance-Pre_Balance) %>%
glimpse()
osteo.df %>%
group_by(Regime) %>%
summarize(Mean=mean(Improvement), SD= sd(Improvement), Median= median(Improvement))
osteo.df %>%
ggplot(aes(x = Pre_Balance, y = Post_Balance, colour=Regime)) +
geom_point() +
ggtitle("Scatterplot of Pre and Post Balance") +
ylab("Post Balance") +
xlab("Pre Balance") +
geom_abline(slope=1, intercept=0)
osteo.df %>%
ggplot(aes(x = "", y = Improvement)) +
geom_boxplot() +
ggtitle("Boxplot of Improvement in Balance") +
ylab("Improvement in Balance") +
xlab("") +
coord_flip()
osteo.df %>%
select(Improvement) %>%
t.test()
normtol.int(osteo.df$Improvement[osteo.df$Regime == "Exercise"], alpha = 0.05, P = 0.95, side = 2)
normtol.int(osteo.df$Improvement[osteo.df$Regime == "Control"], alpha = 0.05, P = 0.95, side = 2)
osteo.df.new <- osteo.df %>%
mutate(goodVO2 = case_when(Post_VO2max >= 24.5 ~ "yes", Post_VO2max < 24.5 ~ "no"))
osteo.df.new %>% select(goodVO2) %>%
table()
ggplot(data=osteo.df.new, aes(Regime))+
geom_bar(aes(fill=goodVO2), position="fill") + ylab('Percent')
osteo.df.new %>% group_by(goodVO2, Regime) %>%
summarise (n = n()) %>%
mutate(freq = n / sum(n))
prop.test(x=c(13,8), n=c(16,14))
knitr::opts_chunk$set(echo = TRUE)
## Test
Test <- data.frame(ID = c(1:12), expression_1 = c(1.01, 1.04, 1.04, 1.99, 2.36, 2.00, 2.89, 3.12, 2.98, 5.00, 4.92, 4.78), expression_2 = c(1.01, 1.04, 1.04, 1.99, 2.36, 2.00, 2.89, 3.12, 2.98, 5.00, 4.92, 4.78) + rnorm(12), expression_3 = c(1.01, 1.04, 1.04, 1.99, 2.36, 2.00, 2.89, 3.12, 2.98, 5.00, 4.92, 4.78) + rnorm(12, mean=2, sd=1), expression_CNA_1 = c(3.05, 2.084, 2.4560, 1.034, 4.89, 3.54, 0.8, 1.7, 1.003, 0.5, 1.55, 2.05), expression_CNA_2 = c(rnorm(12, mean=2, sd=2)), state_CNA_1 = as.factor(c(2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 0)), state_CNA_2 = as.factor(c(0,0,1,1,0,0,1,1,0,0,1,1)), id = c("M1", "M2", "M3", "M4", "M5", "M6", "M7", "M8", "M9", "M10", "M11", "M12"), tissue = c("LUNG", "LUNG", "LUNG", "BRAIN", "BRAIN", "BRAIN", "LUNG", "LUNG", "LUNG", "BRAIN", "BRAIN", "BRAIN"),cells =  c("B", "B", "B", "B", "B", "B", "T", "T", "T", "T", "T", "T"), group = c("LUNG_B", "LUNG_B", "LUNG_B", "BRAIN_B", "BRAIN_B", "BRAIN_B", "LUNG_T", "LUNG_T" , "LUNG_T", "BRAIN_T", "BRAIN_T", "BRAIN_T"), age = c(1,2,3,4,4,3,2,1,1,2,3,4))
Test
## glm with weights
design_m <- model.matrix(~tissue + 0)
## glm with weights
attach(Test)
design_m <- model.matrix(~tissue + 0)
w <- limma::arrayWeights(Test[,1], design_m)
w <- limma::arrayWeights(Test[,1,2,3], design_m)
w <- limma::arrayWeights(Test[,1:3], design_m)
Test[,1]
w <- limma::arrayWeights(Test[,2], design_m)
Test[,2]
w <- limma::arrayWeights(Test[,2:3], design_m)
w <- limma::arrayWeights(as.data.frame(t(Test[,2:3])), design_m)
w <- limma::arrayWeights(as.data.frame(t(Test[,2])), design_m)
w <- limma::arrayWeights(as.data.frame(t(Test[,2:3])), design_m)
w <- limma::arrayWeights(as.data.frame(t(Test[,2:4])), design_m)
w <- limma::arrayWeights(as.data.frame(t(Test[,2:3])), design_m)
w <- limma::arrayWeights(as.data.frame(t(Test[,2:4])), design_m)
glm(Test[,1] ~ tissue + 0, data = Test, family = gaussian("identity"), weights = w)
glm(Test[,1] ~ tissue + 0, data = Test, family = gaussian("identity"))
, weights = w
glm(Test[,1] ~ tissue + 0, data = Test, family = gaussian("identity"), weights = w)
glm(Test[,2] ~ tissue + 0, data = Test, family = gaussian("identity"), weights = w)
glm(Test[,2] ~ tissue + 0, data = Test, family = gaussian("identity"))
glm(Test[,2] ~ tissue + 0, data = Test, family = gaussian("identity"))
glm(Test[,2] ~ tissue + 0, data = Test, family = gaussian("identity"), weights = w)
## long form
long_data <- melt(Test)
## long form
long_data <- reshape2::melt(Test)
View(long_data)
## long form
long_data <- reshape2::melt(Test[,c(1,2,3,4, 10)])
View(long_data)
## long form
long_data <- reshape2::melt(Test[,c(2,3,4,9,10)], )
## long form
long_data <- reshape2::melt(Test[,c(2,3,4,9,10)])
View(long_data)
glmer(value ~ tissue + 0 + (1|id), data = long_data, family = gaussian("identity"))
library(data.table)
library(ggrepel)
library(dplyr)
library(tidyr)
library(lme4)
glmer(value ~ tissue + 0 + (1|id), data = long_data, family = gaussian("identity"))
## Test
Test <- data.frame(ID = c(1:12), expression_1 = c(1.01, 1.04, 1.04, 1.99, 2.36, 2.00, 2.89, 3.12, 2.98, 5.00, 4.92, 4.78), expression_2 = c(1.01, 1.04, 1.04, 1.99, 2.36, 2.00, 2.89, 3.12, 2.98, 5.00, 4.92, 4.78) + rnorm(12), expression_3 = c(1.01, 1.04, 1.04, 1.99, 2.36, 2.00, 2.89, 3.12, 2.98, 5.00, 4.92, 4.78) + rnorm(12, mean=2, sd=1), expression_CNA_1 = c(3.05, 2.084, 2.4560, 1.034, 4.89, 3.54, 0.8, 1.7, 1.003, 0.5, 1.55, 2.05), expression_CNA_2 = c(rnorm(12, mean=2, sd=2)), state_CNA_1 = as.factor(c(2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 0)), state_CNA_2 = as.factor(c(0,0,1,1,0,0,1,1,0,0,1,1)), id = c("M1", "M2", "M3", "M4", "M5", "M6", "M7", "M8", "M9", "M10", "M11", "M12"), tissue = c("LUNG", "LUNG", "LUNG", "BRAIN", "BRAIN", "BRAIN", "LUNG", "LUNG", "LUNG", "BRAIN", "BRAIN", "BRAIN"),cells =  c("B", "B", "B", "B", "B", "B", "T", "T", "T", "T", "T", "T"), group = c("LUNG_B", "LUNG_B", "LUNG_B", "BRAIN_B", "BRAIN_B", "BRAIN_B", "LUNG_T", "LUNG_T" , "LUNG_T", "BRAIN_T", "BRAIN_T", "BRAIN_T"), age = c(1,2,3,4,4,3,2,1,1,2,3,4))
Test
# Read in the data
osteo.df <- read.csv("Osteo_exercise_wide.csv")
# Read in the data
osteo.df <- read.csv("/home/lydia/Downloads/Osteo_exercise_wide.csv")
head(osteo.df)
osteo.df.new <- osteo.df %>%
mutate(goodVO2 = case_when(Post_VO2max >= 24.5 ~ "yes", Post_VO2max < 24.5 ~ "no"))
osteo.df.new %>% select(goodVO2) %>%
table()
osteo.df.new %>% group_by(Regime) %>% select(goodVO2) %>%
table()
osteo.df.new %>% group_by(Regime) %>% select(goodVO2, Regime) %>%
table()
ggplot(data=osteo.df.new, aes(Regime))+
geom_bar(aes(fill=goodVO2), position="fill") + ylab('Percent')
osteo.df.new %>% group_by(goodVO2, Regime) %>%
summarise (n = n()) %>%
mutate(freq = n / sum(n))
prop.test(x=c(13,8), n=c(16,14))
shiny::runApp('Linked_OneDrive/PhD_Project/Shiny_App_Code/GEOXAR')
